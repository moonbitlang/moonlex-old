// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/lex/lib/util/char_set"

import(
  "moonbitlang/lex/lib/util/diet"
)

// Values
let any : CharSet

let empty : CharSet

fn of_array(Array[Char]) -> CharSet

fn range(Char, Char) -> CharSet

fn singleton(Char) -> CharSet

// Errors

// Types and methods
pub struct CharSet(@diet.Tree[Char])
fn CharSet::complement(Self) -> Self
fn CharSet::contains(Self, Char) -> Bool
fn CharSet::difference(Self, Self) -> Self
fn CharSet::disjoint(Self, Self) -> Bool
fn CharSet::inner(Self) -> @diet.Tree[Char]
fn CharSet::intersection(Self, Self) -> Self
fn CharSet::is_empty(Self) -> Bool
fn CharSet::iter(Self) -> Iter[Char]
fn CharSet::iter_ranges(Self) -> Iter[(Char, Char)]
fn CharSet::negated(Self) -> Self
fn CharSet::slice(Self, min? : Char, max? : Char) -> Self
fn CharSet::subset(Self, Self) -> Bool
fn CharSet::union(Self, Self) -> Self
impl Add for CharSet
impl BitAnd for CharSet
impl Compare for CharSet
impl Eq for CharSet
impl Hash for CharSet
impl Neg for CharSet
impl Show for CharSet
impl Sub for CharSet
impl ToJson for CharSet

// Type aliases
pub typealias CharSet as T

// Traits

