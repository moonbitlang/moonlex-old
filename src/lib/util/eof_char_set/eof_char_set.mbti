// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/lex/lib/util/eof_char_set"

import(
  "moonbitlang/lex/lib/util/char_set"
)

// Values
let any : EofCharSet

let empty : EofCharSet

let eof : EofCharSet

fn from_char_set(@char_set.CharSet) -> EofCharSet

fn of_array(Array[Char]) -> EofCharSet

fn range(Char, Char) -> EofCharSet

fn singleton(Char) -> EofCharSet

// Errors

// Types and methods
type EofChar
fn EofChar::char(Char) -> Self
fn EofChar::eof() -> Self
fn EofChar::repr(Self) -> EofCharRepr
impl Compare for EofChar
impl Eq for EofChar
impl Hash for EofChar
impl Show for EofChar
impl ToJson for EofChar
impl @moonbitlang/lex/lib/util/bounded_enum.BoundedEnum for EofChar

pub enum EofCharRepr {
  Eof
  Char(Char)
}

type EofCharSet
fn EofCharSet::complement(Self) -> Self
fn EofCharSet::contains(Self, Char) -> Bool
fn EofCharSet::difference(Self, Self) -> Self
fn EofCharSet::disjoint(Self, Self) -> Bool
fn EofCharSet::intersection(Self, Self) -> Self
fn EofCharSet::is_empty(Self) -> Bool
fn EofCharSet::iter(Self) -> Iter[EofChar]
fn EofCharSet::iter_ranges(Self) -> Iter[(EofChar, EofChar)]
fn EofCharSet::negated(Self) -> Self
fn EofCharSet::slice(Self, min? : Char, max? : Char) -> Self
fn EofCharSet::subset(Self, Self) -> Bool
fn EofCharSet::union(Self, Self) -> Self
impl Add for EofCharSet
impl BitAnd for EofCharSet
impl Compare for EofCharSet
impl Default for EofCharSet
impl Eq for EofCharSet
impl Hash for EofCharSet
impl Neg for EofCharSet
impl Show for EofCharSet
impl Sub for EofCharSet
impl ToJson for EofCharSet

// Type aliases
pub typealias EofCharSet as T

// Traits

