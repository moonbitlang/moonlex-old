// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/lex/lib/util/diet"

import(
  "moonbitlang/lex/lib/util/bounded_enum"
)

// Values
fn[N : @bounded_enum.BoundedEnum] difference(Tree[N], Tree[N]) -> Tree[N]

fn[N] empty() -> Tree[N]

fn[N : @bounded_enum.BoundedEnum] intersection(Tree[N], Tree[N]) -> Tree[N]

fn[N] interval(N, N) -> Tree[N]

fn[N : @bounded_enum.BoundedEnum] of(Array[N]) -> Tree[N]

fn[N] singleton(N) -> Tree[N]

fn[N : @bounded_enum.BoundedEnum] union(Tree[N], Tree[N]) -> Tree[N]

// Errors

// Types and methods
type Tree[T]
fn[N : @bounded_enum.BoundedEnum] Tree::complement(Self[N]) -> Self[N]
fn[N : @bounded_enum.BoundedEnum] Tree::contains(Self[N], N) -> Bool
fn[N] Tree::is_empty(Self[N]) -> Bool
fn[N : @bounded_enum.BoundedEnum] Tree::iter(Self[N]) -> Iter[N]
fn[N] Tree::iter_intervals(Self[N]) -> Iter[(N, N)]
fn[N : @bounded_enum.BoundedEnum] Tree::slice(Self[N], min? : N, max? : N) -> Self[N]
impl[N : Compare] Compare for Tree[N]
impl[N] Default for Tree[N]
impl[N : Eq] Eq for Tree[N]
impl[N : Hash] Hash for Tree[N]

// Type aliases
pub typealias Tree as T

// Traits

